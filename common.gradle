version = project.mod_version
group = project.maven_group
plugins.apply 'java'
plugins.apply 'maven-publish'

repositories {
    gradlePluginPortal()
    mavenCentral()
    maven { url = 'https://repo.opencollab.dev/main/' }
    maven { url = 'https://api.modrinth.com/maven' }
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://oss.sonatype.org/content/groups/public/' }
}

base {
    archivesName = project.archives_base_name + "-" + project.name
}

configurations {
    jarLib {
        extendsFrom(implementation)
    }
}


ext.loadProps = { func ->
    func(
            "mod_id": project.archives_base_name,//+ "-" + project.name,
            "version": project.version,
            "pretty_name": project.pretty_name,
            "authors": project.authors,
            "minecraft_version": project.minecraft_version,
            "floodgate_version": project.floodgate_version,
            "luckperms_version": project.luckperms_version,
            "slf4j_version": project.slf4j_version,
            "toml_version": project.toml_version,
            "loader_version": project.loader_version,
            'velocity_version': project.velocity_version
    )
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    sourceSets.main.name
    loadProps(task.inputs.&properties)
    task.from templateSource
    task.into templateDest
    task.expand inputs.properties
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    duplicatesStrategy = DuplicatesStrategy.WARN
    from {
        configurations.jarLib.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}
